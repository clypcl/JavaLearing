面试问题
一.面向对象的4大特性
1.抽象------ 抽象，就是将一类对象的共同特征总结归纳出来构造类的过程。包括数据抽象 和 行为抽象。抽象只关注对象的属性和行为，对行为的具体细节并不关注。

2.继承------ 继承，就是从已有类得到继承信息创建新的类的过程。继承让变化的软件系统有了一定的延续性，同时也是封装过程中可变因素的重要手段。

3.封装------ 通常认为是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口，面向对象的本质就是将现实世界描绘成一组完全自治，封闭的对象。
            在类中编写的方法其实是对实现细节的封装，编写的类其实是对数据和数据操作的封装。封装隐藏所有可以隐藏的，只向外接提供简单的编程接口
            
4.多态------ 多态是指 允许不同子类型的对象对同一消息做出不同的响应。就是用同样的对象引用  调用同样的方法但是做了不同的事情。多态包括编译时的多态和运
            行时的多态。如果将对象的方法视为对象向外界提供的服务，那么运行时多态可以理解为：A系统访问B系统的服务是,B系统有多种提供服务的方式，但对A
            来说是透明的。方法重载（overload）实现的是编译时的多态性，方法重写（override）实现的是运行时的多态性；运行时多态是面向对象的精髓，要实
            现多态：1.）方法重写--子类继承父类并重写父类中已有的或抽象的方法。 2.）对象造型--父类引用 引用子类对象，这样同样的引用调用同样的方法会根
            据 子类的不同表现出不同的行为。
            
二.&和&&的区别 
   &有两种用法，1.）按位与 2.）逻辑与 ，&&运算符是短路与。两者都要求运算符两边的布尔值都为true的时候整个表达式的值才返回true。&&称为短路与，是因为
运算符左边表达式的值如果为false，右边的表达式会直接短路掉，不会进行运算。

三.内存中的栈（stack）、堆（heap）和静态区（static area）的用法
1.栈---通常定义的基本数据类型的变量，一个对象的引用，函数调用的现场保存 都是使用的栈空间
2.堆---通过new关键字和构造器创建的对象 存放在 堆空间
3.静态区---程序中的字变量和常量存放在静态区
栈空间操作很快但是栈很小，通常大量的对象都放在堆内存上。理论上整个内存没有被其他进程使用的空间都可以看成是堆内存
          String str = new String("hello");
str存放在栈中，new出来的字符串对象放在堆中，hello放在静态区

四.两个对象的值满足x.equals(y)==true，那么他们的哈希码应该相同。java中对于equals方法和hashCode方法是这样规定的：
1.如果两个对象相同，那么hashCode一定要相同。
2.如果两个对象的hashcode相同，他们并不一定相同。
equals方法必须满足的条件：1.）自反性（x.equals(x)必须返回true）        2.）对称性(x.equals(y)返回true时，y.equals(x)也必须返回true)
                        3.）传递性（x.equals(y)返回true，y.equals(z)返回true，则x.equals(z)也必须返回true）
                        4.）统一性（当x和y的引用信息没有被修改时，多次访问x.equals(y)得到的返回值必须相同），对于任何非null的引用x，
                           x.equals(null)返回的值必须是false。
高质量equals方法的诀窍：  1.）使用==操作符检查"参数是否为这个对象的引用"
                        2.）使用instanceof检查"参数的类型是否正确" 
                        3.）对于类中的关键属性，检查参数传入对象的属性是否与之匹配
                        4.）写完equals方法后，检查是否满足以上条件
                        5.）重写equals方法时都要重写hashcode 方法
                        6.）不要将equals方法中的参数Object对象替换成其他类型的参数，重写是要用@Override注解
   
五.String 和 StringBuild、StringBuffer的区别
   都可以存储和操作字符串。String是只读字符串，引用的字符串内容不能被修改。StringBuild和StringBuffer类表示的字符串对象可以直接进行修改。
StringBuild 与 StringBuffer方法完全相同，StringBuild是单线程环境下使用的，所有方法没有被synchronized修饰，所以效率较高

